{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-4f631b7a1ef1cc83bd6783ae5f3d93474ae98755",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/MockUniswapV3Router.sol": "project/contracts/MockUniswapV3Router.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/MockUniswapV3Router.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title MockUniswapV3Router - Mock implementation of Uniswap V3 Router for Saga chain testing\ncontract MockUniswapV3Router {\n    mapping(address => mapping(address => uint256)) public mockRates; // tokenIn => tokenOut => rate\n    mapping(address => uint256) public mockLiquidity;\n    \n    event Swap(\n        address indexed tokenIn,\n        address indexed tokenOut,\n        address indexed recipient,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n    \n    constructor() {\n        // Set some default mock rates\n        mockRates[address(0)][0x0000000000000000000000000000000000000001] = 1e18; // ETH to USDC (mock)\n        mockRates[0x0000000000000000000000000000000000000001][address(0)] = 1e18; // USDC to ETH (mock)\n    }\n    \n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n    \n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {\n        require(block.timestamp <= params.deadline, \"Transaction too old\");\n        require(params.amountIn > 0, \"Amount must be greater than 0\");\n        \n        // Mock swap calculation\n        uint256 rate = mockRates[params.tokenIn][params.tokenOut];\n        if (rate == 0) {\n            rate = 1e18; // Default 1:1 rate if not set\n        }\n        \n        amountOut = (params.amountIn * rate) / 1e18;\n        require(amountOut >= params.amountOutMinimum, \"Insufficient output amount\");\n        \n        emit Swap(params.tokenIn, params.tokenOut, params.recipient, params.amountIn, amountOut);\n        return amountOut;\n    }\n    \n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut) {\n        require(block.timestamp <= params.deadline, \"Transaction too old\");\n        require(params.amountIn > 0, \"Amount must be greater than 0\");\n        \n        // For simplicity, we'll just return a mock amount\n        amountOut = params.amountIn * 95 / 100; // 5% slippage mock\n        \n        emit Swap(address(0), address(0), params.recipient, params.amountIn, amountOut);\n        return amountOut;\n    }\n    \n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn) {\n        require(block.timestamp <= params.deadline, \"Transaction too old\");\n        require(params.amountOut > 0, \"Amount must be greater than 0\");\n        \n        // Mock calculation\n        uint256 rate = mockRates[params.tokenIn][params.tokenOut];\n        if (rate == 0) {\n            rate = 1e18; // Default 1:1 rate if not set\n        }\n        \n        amountIn = (params.amountOut * 1e18) / rate;\n        require(amountIn <= params.amountInMaximum, \"Excessive input amount\");\n        \n        emit Swap(params.tokenIn, params.tokenOut, params.recipient, amountIn, params.amountOut);\n        return amountIn;\n    }\n    \n    // Admin functions to set mock rates for testing\n    function setMockRate(address tokenIn, address tokenOut, uint256 rate) external {\n        mockRates[tokenIn][tokenOut] = rate;\n    }\n    \n    function setMockLiquidity(address token, uint256 liquidity) external {\n        mockLiquidity[token] = liquidity;\n    }\n    \n    // Mock function to simulate quote\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external view returns (uint256 amountOut) {\n        uint256 rate = mockRates[tokenIn][tokenOut];\n        if (rate == 0) {\n            rate = 1e18; // Default 1:1 rate if not set\n        }\n        \n        return (amountIn * rate) / 1e18;\n    }\n    \n    // Allow the contract to receive ETH\n    receive() external payable {}\n}\n"
      }
    }
  }
}