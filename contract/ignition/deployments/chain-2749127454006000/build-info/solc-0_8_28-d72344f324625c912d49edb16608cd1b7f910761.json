{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-d72344f324625c912d49edb16608cd1b7f910761",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/DOAGovernance.sol": "project/contracts/DOAGovernance.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/DOAGovernance.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/// @title DAOGovernance - On-chain governance with real voting mechanism\ncontract DAOGovernance is Ownable, ReentrancyGuard {\n    // Events\n    event ProposalCreated(\n        uint256 indexed proposalId,\n        address indexed creator,\n        string title,\n        string description,\n        address target,\n        bytes data,\n        uint256 value,\n        uint256 expiryTime\n    );\n    \n    event VoteCast(\n        uint256 indexed proposalId,\n        address indexed voter,\n        bool support,\n        uint256 weight\n    );\n    \n    event ProposalExecuted(\n        uint256 indexed proposalId,\n        address indexed executor,\n        bytes result\n    );\n    \n    event ProposalExpired(uint256 indexed proposalId);\n    event QuorumUpdated(uint256 newQuorum);\n\n    // Structs\n    struct Proposal {\n        uint256 id;\n        address creator;\n        string title;\n        string description;\n        address target;\n        bytes data;\n        uint256 value;\n        uint256 expiryTime;\n        uint256 forVotes;\n        uint256 againstVotes;\n        bool executed;\n        bool expired;\n        mapping(address => bool) hasVoted;\n        mapping(address => Vote) votes;\n    }\n\n    struct Vote {\n        bool support;\n        uint256 weight;\n        uint256 timestamp;\n    }\n\n    // State variables\n    uint256 private _proposalIds = 0;\n    mapping(uint256 => Proposal) public proposals;\n    mapping(address => bool) public isVoter;\n    uint256 public quorum = 3; // Minimum 3 votes required\n    uint256 public votingPeriod = 7 days; // Default voting period\n    uint256 public proposalThreshold = 1; // Minimum proposals to create\n\n    // Modifiers\n    modifier onlyVoter() {\n        require(isVoter[msg.sender], \"Governance: caller is not a voter\");\n        _;\n    }\n\n    modifier proposalExists(uint256 proposalId) {\n        require(proposalId <= _proposalIds && proposalId > 0, \"Governance: proposal does not exist\");\n        _;\n    }\n\n    modifier proposalActive(uint256 proposalId) {\n        Proposal storage proposal = proposals[proposalId];\n        require(!proposal.executed, \"Governance: proposal already executed\");\n        require(!proposal.expired, \"Governance: proposal already expired\");\n        require(block.timestamp < proposal.expiryTime, \"Governance: proposal expired\");\n        _;\n    }\n\n    modifier proposalNotVoted(uint256 proposalId) {\n        require(!proposals[proposalId].hasVoted[msg.sender], \"Governance: already voted\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {\n        // Add deployer as initial voter\n        isVoter[msg.sender] = true;\n    }\n\n    // Governance functions\n    function addVoter(address voter) external onlyOwner {\n        require(voter != address(0), \"Governance: invalid voter address\");\n        isVoter[voter] = true;\n    }\n\n    function removeVoter(address voter) external onlyOwner {\n        require(voter != owner(), \"Governance: cannot remove owner\");\n        isVoter[voter] = false;\n    }\n\n    function setQuorum(uint256 newQuorum) external onlyOwner {\n        require(newQuorum > 0, \"Governance: quorum must be greater than 0\");\n        quorum = newQuorum;\n        emit QuorumUpdated(newQuorum);\n    }\n\n    function setVotingPeriod(uint256 newPeriod) external onlyOwner {\n        require(newPeriod > 0, \"Governance: voting period must be greater than 0\");\n        votingPeriod = newPeriod;\n    }\n\n    // Proposal functions\n    function createProposal(\n        string memory title,\n        string memory description,\n        address target,\n        bytes memory data,\n        uint256 value,\n        uint256 customExpiryTime\n    ) external onlyVoter returns (uint256) {\n        require(target != address(0), \"Governance: invalid target address\");\n        \n        uint256 expiryTime = customExpiryTime > 0 ? customExpiryTime : block.timestamp + votingPeriod;\n        require(expiryTime > block.timestamp, \"Governance: expiry time must be in the future\");\n\n        _proposalIds++;\n        uint256 proposalId = _proposalIds;\n\n        Proposal storage proposal = proposals[proposalId];\n        proposal.id = proposalId;\n        proposal.creator = msg.sender;\n        proposal.title = title;\n        proposal.description = description;\n        proposal.target = target;\n        proposal.data = data;\n        proposal.value = value;\n        proposal.expiryTime = expiryTime;\n        proposal.executed = false;\n        proposal.expired = false;\n\n        emit ProposalCreated(\n            proposalId,\n            msg.sender,\n            title,\n            description,\n            target,\n            data,\n            value,\n            expiryTime\n        );\n\n        return proposalId;\n    }\n\n    function vote(uint256 proposalId, bool support) \n        external \n        onlyVoter \n        proposalExists(proposalId) \n        proposalActive(proposalId) \n        proposalNotVoted(proposalId) \n        nonReentrant \n    {\n        Proposal storage proposal = proposals[proposalId];\n        \n        // Check if proposal has expired\n        if (block.timestamp >= proposal.expiryTime) {\n            proposal.expired = true;\n            emit ProposalExpired(proposalId);\n            return;\n        }\n\n        proposal.hasVoted[msg.sender] = true;\n        proposal.votes[msg.sender] = Vote({\n            support: support,\n            weight: 1, // Each voter has weight 1\n            timestamp: block.timestamp\n        });\n\n        if (support) {\n            proposal.forVotes += 1;\n        } else {\n            proposal.againstVotes += 1;\n        }\n\n        emit VoteCast(proposalId, msg.sender, support, 1);\n    }\n\n    function executeProposal(uint256 proposalId) \n        external \n        onlyVoter \n        proposalExists(proposalId) \n        nonReentrant \n    {\n        Proposal storage proposal = proposals[proposalId];\n        \n        require(!proposal.executed, \"Governance: proposal already executed\");\n        require(!proposal.expired, \"Governance: proposal already expired\");\n        require(block.timestamp >= proposal.expiryTime, \"Governance: proposal not expired yet\");\n        require(proposal.forVotes >= quorum, \"Governance: quorum not reached\");\n        require(proposal.forVotes > proposal.againstVotes, \"Governance: proposal not passed\");\n\n        proposal.executed = true;\n\n        // Execute the proposal\n        (bool success, bytes memory result) = proposal.target.call{value: proposal.value}(proposal.data);\n        require(success, \"Governance: execution failed\");\n\n        emit ProposalExecuted(proposalId, msg.sender, result);\n    }\n\n    function expireProposal(uint256 proposalId) \n        external \n        onlyVoter \n        proposalExists(proposalId) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        \n        require(!proposal.executed, \"Governance: proposal already executed\");\n        require(!proposal.expired, \"Governance: proposal already expired\");\n        require(block.timestamp >= proposal.expiryTime, \"Governance: proposal not expired yet\");\n\n        proposal.expired = true;\n        emit ProposalExpired(proposalId);\n    }\n\n    // View functions\n    function getProposal(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (\n            uint256 id,\n            address creator,\n            string memory title,\n            string memory description,\n            address target,\n            bytes memory data,\n            uint256 value,\n            uint256 expiryTime,\n            uint256 forVotes,\n            uint256 againstVotes,\n            bool executed,\n            bool expired\n        ) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (\n            proposal.id,\n            proposal.creator,\n            proposal.title,\n            proposal.description,\n            proposal.target,\n            proposal.data,\n            proposal.value,\n            proposal.expiryTime,\n            proposal.forVotes,\n            proposal.againstVotes,\n            proposal.executed,\n            proposal.expired\n        );\n    }\n\n    function getProposalBasic(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (\n            uint256 id,\n            address creator,\n            string memory title,\n            string memory description,\n            address target,\n            bytes memory data,\n            uint256 value,\n            uint256 expiryTime\n        ) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (\n            proposal.id,\n            proposal.creator,\n            proposal.title,\n            proposal.description,\n            proposal.target,\n            proposal.data,\n            proposal.value,\n            proposal.expiryTime\n        );\n    }\n\n    function getProposalVotes(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (\n            uint256 forVotes,\n            uint256 againstVotes\n        ) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (proposal.forVotes, proposal.againstVotes);\n    }\n\n    function getProposalStatus(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (\n            bool executed,\n            bool expired\n        ) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        return (proposal.executed, proposal.expired);\n    }\n\n    function getVote(uint256 proposalId, address voter) \n        external \n        view \n        proposalExists(proposalId) \n        returns (bool support, uint256 weight, uint256 timestamp) \n    {\n        Vote memory voterVote = proposals[proposalId].votes[voter];\n        return (voterVote.support, voterVote.weight, voterVote.timestamp);\n    }\n\n    function hasVoted(uint256 proposalId, address voter) \n        external \n        view \n        proposalExists(proposalId) \n        returns (bool) \n    {\n        return proposals[proposalId].hasVoted[voter];\n    }\n\n    function canExecute(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (bool) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        \n        if (proposal.executed || proposal.expired) {\n            return false;\n        }\n        \n        if (block.timestamp < proposal.expiryTime) {\n            return false;\n        }\n        \n        if (proposal.forVotes < quorum) {\n            return false;\n        }\n        \n        if (proposal.forVotes <= proposal.againstVotes) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    function getProposalState(uint256 proposalId) \n        external \n        view \n        proposalExists(proposalId) \n        returns (string memory) \n    {\n        Proposal storage proposal = proposals[proposalId];\n        \n        if (proposal.executed) {\n            return \"Executed\";\n        }\n        \n        if (proposal.expired) {\n            return \"Expired\";\n        }\n        \n        if (block.timestamp >= proposal.expiryTime) {\n            return \"Expired\";\n        }\n        \n        if (proposal.forVotes >= quorum && proposal.forVotes > proposal.againstVotes) {\n            return \"Passed\";\n        }\n        \n        if (proposal.forVotes + proposal.againstVotes > 0) {\n            return \"Active\";\n        }\n        \n        return \"Pending\";\n    }\n\n    function getTotalProposals() external view returns (uint256) {\n        return _proposalIds;\n    }\n\n    // Emergency functions\n    function emergencyExecute(uint256 proposalId) external onlyOwner proposalExists(proposalId) {\n        Proposal storage proposal = proposals[proposalId];\n        require(!proposal.executed, \"Governance: already executed\");\n        \n        proposal.executed = true;\n        (bool success, bytes memory result) = proposal.target.call{value: proposal.value}(proposal.data);\n        require(success, \"Governance: execution failed\");\n        \n        emit ProposalExecuted(proposalId, msg.sender, result);\n    }\n\n    // Receive function\n    receive() external payable {}\n} \n"
      }
    }
  }
}