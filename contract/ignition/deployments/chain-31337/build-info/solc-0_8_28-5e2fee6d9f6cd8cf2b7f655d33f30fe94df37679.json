{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-5e2fee6d9f6cd8cf2b7f655d33f30fe94df37679",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/DAOActionExecutor.sol": "project/contracts/DAOActionExecutor.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/DAOActionExecutor.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title DAOActionExecutor - Executes proposals created by OmniAgent\ncontract DAOActionExecutor {\n    address public owner;\n\n    event ExecutedProposal(address indexed target, uint256 value, bytes data, bytes response);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not authorized\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"Zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) external onlyOwner returns (bytes memory) {\n        require(target != address(0), \"Invalid target\");\n\n        (bool success, bytes memory response) = target.call{value: value}(data);\n        require(success, \"Call failed\");\n\n        emit ExecutedProposal(target, value, data, response);\n        return response;\n    }\n\n    receive() external payable {}\n}\n"
      }
    }
  }
}